// Generated by gencpp from file ssafy_2/mvp.msg
// DO NOT EDIT!


#ifndef SSAFY_2_MESSAGE_MVP_H
#define SSAFY_2_MESSAGE_MVP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ssafy_2
{
template <class ContainerAllocator>
struct mvp_
{
  typedef mvp_<ContainerAllocator> Type;

  mvp_()
    : longitudei(0.0)
    , latitudei(0.0)
    , longitudeg(0.0)
    , latitudeg(0.0)  {
    }
  mvp_(const ContainerAllocator& _alloc)
    : longitudei(0.0)
    , latitudei(0.0)
    , longitudeg(0.0)
    , latitudeg(0.0)  {
  (void)_alloc;
    }



   typedef double _longitudei_type;
  _longitudei_type longitudei;

   typedef double _latitudei_type;
  _latitudei_type latitudei;

   typedef double _longitudeg_type;
  _longitudeg_type longitudeg;

   typedef double _latitudeg_type;
  _latitudeg_type latitudeg;





  typedef boost::shared_ptr< ::ssafy_2::mvp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssafy_2::mvp_<ContainerAllocator> const> ConstPtr;

}; // struct mvp_

typedef ::ssafy_2::mvp_<std::allocator<void> > mvp;

typedef boost::shared_ptr< ::ssafy_2::mvp > mvpPtr;
typedef boost::shared_ptr< ::ssafy_2::mvp const> mvpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssafy_2::mvp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssafy_2::mvp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssafy_2::mvp_<ContainerAllocator1> & lhs, const ::ssafy_2::mvp_<ContainerAllocator2> & rhs)
{
  return lhs.longitudei == rhs.longitudei &&
    lhs.latitudei == rhs.latitudei &&
    lhs.longitudeg == rhs.longitudeg &&
    lhs.latitudeg == rhs.latitudeg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssafy_2::mvp_<ContainerAllocator1> & lhs, const ::ssafy_2::mvp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssafy_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssafy_2::mvp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssafy_2::mvp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssafy_2::mvp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssafy_2::mvp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssafy_2::mvp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssafy_2::mvp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssafy_2::mvp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be83d3a65597cc0a4c5a9ccca46da4e1";
  }

  static const char* value(const ::ssafy_2::mvp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe83d3a65597cc0aULL;
  static const uint64_t static_value2 = 0x4c5a9ccca46da4e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssafy_2::mvp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssafy_2/mvp";
  }

  static const char* value(const ::ssafy_2::mvp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssafy_2::mvp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 longitudei\n"
"float64 latitudei\n"
"float64 longitudeg\n"
"float64 latitudeg\n"
;
  }

  static const char* value(const ::ssafy_2::mvp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssafy_2::mvp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longitudei);
      stream.next(m.latitudei);
      stream.next(m.longitudeg);
      stream.next(m.latitudeg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mvp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssafy_2::mvp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssafy_2::mvp_<ContainerAllocator>& v)
  {
    s << indent << "longitudei: ";
    Printer<double>::stream(s, indent + "  ", v.longitudei);
    s << indent << "latitudei: ";
    Printer<double>::stream(s, indent + "  ", v.latitudei);
    s << indent << "longitudeg: ";
    Printer<double>::stream(s, indent + "  ", v.longitudeg);
    s << indent << "latitudeg: ";
    Printer<double>::stream(s, indent + "  ", v.latitudeg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSAFY_2_MESSAGE_MVP_H
