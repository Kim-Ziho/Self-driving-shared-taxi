// Generated by gencpp from file ssafy_2/GpsServiceRequest.msg
// DO NOT EDIT!


#ifndef SSAFY_2_MESSAGE_GPSSERVICEREQUEST_H
#define SSAFY_2_MESSAGE_GPSSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ssafy_2
{
template <class ContainerAllocator>
struct GpsServiceRequest_
{
  typedef GpsServiceRequest_<ContainerAllocator> Type;

  GpsServiceRequest_()
    : start_latitude(0.0)
    , start_longitude(0.0)
    , end_latitude(0.0)
    , end_longitude(0.0)  {
    }
  GpsServiceRequest_(const ContainerAllocator& _alloc)
    : start_latitude(0.0)
    , start_longitude(0.0)
    , end_latitude(0.0)
    , end_longitude(0.0)  {
  (void)_alloc;
    }



   typedef double _start_latitude_type;
  _start_latitude_type start_latitude;

   typedef double _start_longitude_type;
  _start_longitude_type start_longitude;

   typedef double _end_latitude_type;
  _end_latitude_type end_latitude;

   typedef double _end_longitude_type;
  _end_longitude_type end_longitude;





  typedef boost::shared_ptr< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GpsServiceRequest_

typedef ::ssafy_2::GpsServiceRequest_<std::allocator<void> > GpsServiceRequest;

typedef boost::shared_ptr< ::ssafy_2::GpsServiceRequest > GpsServiceRequestPtr;
typedef boost::shared_ptr< ::ssafy_2::GpsServiceRequest const> GpsServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssafy_2::GpsServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssafy_2::GpsServiceRequest_<ContainerAllocator1> & lhs, const ::ssafy_2::GpsServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start_latitude == rhs.start_latitude &&
    lhs.start_longitude == rhs.start_longitude &&
    lhs.end_latitude == rhs.end_latitude &&
    lhs.end_longitude == rhs.end_longitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssafy_2::GpsServiceRequest_<ContainerAllocator1> & lhs, const ::ssafy_2::GpsServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssafy_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "822eabc9d50ced1b49be73fe484c8bd1";
  }

  static const char* value(const ::ssafy_2::GpsServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x822eabc9d50ced1bULL;
  static const uint64_t static_value2 = 0x49be73fe484c8bd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssafy_2/GpsServiceRequest";
  }

  static const char* value(const ::ssafy_2::GpsServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 start_latitude\n"
"float64 start_longitude\n"
"float64 end_latitude\n"
"float64 end_longitude\n"
;
  }

  static const char* value(const ::ssafy_2::GpsServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_latitude);
      stream.next(m.start_longitude);
      stream.next(m.end_latitude);
      stream.next(m.end_longitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssafy_2::GpsServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssafy_2::GpsServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "start_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.start_latitude);
    s << indent << "start_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.start_longitude);
    s << indent << "end_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.end_latitude);
    s << indent << "end_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.end_longitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSAFY_2_MESSAGE_GPSSERVICEREQUEST_H
